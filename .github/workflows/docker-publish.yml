name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '0 8 * * 4'
  push:
#    branches: [ "repo4eu_main", "repo4eu_dev" ]
    branches: [ "master", "dev"]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
#    branches: [ "repo4eu_main", "repo4eu_dev" ]
    branches: [ "master", "dev"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  BASE_IMAGE_NAME: ${{ github.repository }}-base
  NEO4J_IMAGE_NAME: ${{ github.repository }}-neo4j


jobs:
  build-base:
 #   if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata for base image
        id: meta-base
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
          # Use 'latest' tag for the scheduled base image build
          tags: |
            type=schedule,pattern=latest

      - name: Build and push base Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./docker_base
          file: ./docker_base/Dockerfile
          # Always push the base image when this job runs
          push: true
          tags: ${{ steps.meta-base.outputs.tags }}
          labels: ${{ steps.meta-base.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

#  build-main:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#      # This is used to complete the identity challenge
#      # with sigstore/fulcio when running outside of PRs.
#      id-token: write
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Setup QEMU
#        uses: docker/setup-qemu-action@v2.1.0
#
#      # Set up BuildKit Docker container builder to be able to build
#      # multi-platform images and export cache
#      # https://github.com/docker/setup-buildx-action
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3.0.0
#        with:
#          install: true
#          use: true
#
#      # Login against a Docker registry except on PR
#      # https://github.com/docker/login-action
#      - name: Log into registry ${{ env.REGISTRY }}
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v3.0.0 # v3.0.0
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      # Extract metadata (tags, labels) for Docker
#      # https://github.com/docker/metadata-action
#      - name: Extract Docker metadata
#        id: meta
#        uses: docker/metadata-action@v5.0.0
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#
#      # Build and push Docker image with Buildx (don't push on PR)
#      # https://github.com/docker/build-push-action
#      - name: Build and push Docker image
#        id: build-and-push
#        uses: docker/build-push-action@v5.0.0
#        with:
#          context: .
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#          platforms: linux/amd64,linux/arm64
#          cache-from: type=gha
#          cache-to: type=gha, mode=max

  build-neo4j:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          install: true
          use: true

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata for Neo4j
        id: meta-neo4j
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.NEO4J_IMAGE_NAME }}

      - name: Build and push Neo4j Docker image
        id: build-and-push-neo4j
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./neo4j
          file: ./neo4j/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-neo4j.outputs.tags }}
          labels: ${{ steps.meta-neo4j.outputs.labels }}
          #Temporary disabled linux/arm64 because of system library issues
          # platforms: linux/amd64,linux/arm64
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
